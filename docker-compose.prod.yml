services:
  postgres:
    image: postgres:15-alpine
    container_name: relay-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-relay}
      POSTGRES_USER: ${POSTGRES_USER:-relay_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - relay-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-relay_user} -d ${POSTGRES_DB:-relay}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  relay-voice:
    build: .
    ports:
      - "8080:8080"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GH_TOKEN=${GH_TOKEN}
      - NODE_ENV=production
      - PORT=8080
      - DATABASE_URL=${DATABASE_URL:-postgresql://relay_user:${POSTGRES_PASSWORD}@postgres:5432/relay}
    volumes:
      # Mount projects directory (adjust path as needed)
      - ${HOME}/Code:/home/relay/projects:ro
      - ${HOME}/.gitconfig:/home/relay/.gitconfig:ro
      - ${HOME}/.ssh:/home/relay/.ssh:ro
      # Mount relay config if it exists
      - ${HOME}/.relay:/home/relay/.relay
    restart: unless-stopped
    networks:
      - relay-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8080/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_prod_data:
    driver: local

networks:
  relay-network:
    driver: bridge