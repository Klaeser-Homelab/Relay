name: Deploy Voice Server

on:
  push:
    branches: [ main ]
    paths:
      - 'voice-server-js/**'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      DOCKER_HOST: tcp://10.0.0.35:2375
      DOCKER_CONTEXT_NAME: proxmox-ctx
      DOCKER_COMPOSE_FILE: docker-compose.prod.yml
      VOICE_SERVER_IMAGE: relay-voice-server:latest
      # Backend Secrets
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Voice Server image
        run: |
          cd voice-server-js
          docker build -t ${{ env.VOICE_SERVER_IMAGE }} .

      - name: Set up Docker context
        run: |
          docker context create ${{ env.DOCKER_CONTEXT_NAME }} --docker host=${{ env.DOCKER_HOST }}

      - name: Save and load image to remote Docker
        run: |
          cd voice-server-js
          docker save ${{ env.VOICE_SERVER_IMAGE }} > voice-server.tar
          docker --context ${{ env.DOCKER_CONTEXT_NAME }} load < voice-server.tar
          rm voice-server.tar

      - name: Stop and remove existing containers
        run: |
          docker --context ${{ env.DOCKER_CONTEXT_NAME }} compose --file ${{ env.DOCKER_COMPOSE_FILE }} down || true

      - name: Start new container
        run: |
          docker --context ${{ env.DOCKER_CONTEXT_NAME }} compose --file ${{ env.DOCKER_COMPOSE_FILE }} up -d --remove-orphans

      - name: Cleanup Docker context
        if: always()
        run: |
          docker context rm ${{ env.DOCKER_CONTEXT_NAME }} --force || true

      - name: Test health endpoint
        run: |
          sleep 10
          curl -f http://${{ secrets.PROXMOX_HEALTH_HOST }}:8080/health || exit 1